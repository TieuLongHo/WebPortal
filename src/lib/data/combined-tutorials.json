{
  "tutorials": [
    {
      "id": "data-visualization",
      "title": "Data Visualization",
      "intro": "Learn the fundamentals of data visualization using our API, enabling you to present data in a more engaging and understandable way.",
      "difficulty": "intermediate",
      "components": [
        {
          "name": "Charts",
          "description": "Charts are visual representations of data. They can help convey complex information in a straightforward, visual format, making it easier to understand patterns, trends, and outliers.",
          "functions": "Create, Customize, Update"
        },
        {
          "name": "Datasets",
          "description": "Datasets are collections of data that the API can process. Understanding how to manipulate datasets is crucial for effective data visualization.",
          "functions": "Import, Filter, Export"
        }
      ],
      "story": "Visualizing data effectively can make the difference between merely presenting information and truly communicating insights. Our API provides tools for creating dynamic, interactive charts and graphs, allowing users to explore and understand data in depth. From simple bar charts to complex scatter plots, learn how to transform your data into compelling visual stories.",
      "user_input": {
        "active": true,
        "measurement_type": "data points",
        "unit": "units"
      },
      "solution": {
        "explanation": "By using the API's data visualization components, you can create powerful visual representations of your data. The guide provides step-by-step instructions on how to select the right chart type, customize it to your needs, and dynamically update it based on user interactions or new data.",
        "code": "void createChart(const std::string& chartType, const DataSet& data) {\\n    Chart* chart = ChartFactory::createChart(chartType);\\n\\n    chart->setData(data);\\n    chart->customizeAppearance();\\n\\n    chart->render();\\n}"
      }
    },
    {
      "id": "getting-started",
      "title": "Getting Started",
      "intro": "This guide will help you get started with the basics of using the API.",
      "difficulty": "easy",
      "components": [
        {
          "name": "Components",
          "description": "Components are the building blocks of the API. They are the objects that you will interact with to get data from the API.",
          "functions": "Functions"
        }
      ],
      "story": "The API is a powerful tool that allows you to access data from the API and use it in your own applications. The API is built on a RESTful architecture, which means that it uses standard HTTP methods to interact with the API. This guide will help you get started with the basics of using the API.",
      "user_input": {
        "active": true,
        "measurement_type": "temperature",
        "unit": "C"
      },
      "solution": {
        "explanation": "The API is a powerful tool that allows you to access data from the API and use it in your own applications. The API is built on a RESTful architecture, which means that it uses standard HTTP methods to interact with the API. This guide will help you get started with the basics of using the API.",
        "code": "void subscribeToTopic(const std::string& topic) {\\n    mosquittopp::mosquitto* client = mosquittopp::mosquitto_new(\"MQTTClient\", true, this);\\n\\n    int rc = mosquittopp::mosquitto_subscribe(client, nullptr, topic.c_str(), 0);\\n    if (rc != MOSQ_ERR_SUCCESS) {\\n      std::cerr << \"Failed to subscribe to topic: \" << topic << std::endl;\\n      return;\\n    }\\n}"
      }
    },
    {
      "id": "real-time-updates",
      "title": "Real-Time Updates",
      "intro": "This section teaches you how to handle real-time data updates, ensuring your application can process and display data as it happens.",
      "difficulty": "hard",
      "components": [
        {
          "name": "WebSocket",
          "description": "WebSocket provides full-duplex communication channels over a single TCP connection, allowing for real-time data flow between the client and server.",
          "functions": "Connect, Send, Receive"
        },
        {
          "name": "Event Listener",
          "description": "Event listeners respond to events triggered by real-time data updates, ensuring your application can react dynamically to new information.",
          "functions": "AddListener, RemoveListener"
        }
      ],
      "story": "In today’s fast-paced digital environment, being able to handle real-time data is crucial. Whether it’s tracking stock prices, monitoring IoT devices, or updating live sports scores, our API provides the necessary tools to ensure your application stays up-to-date with the latest data without delay.",
      "user_input": {
        "active": false,
        "measurement_type": "events",
        "unit": "messages"
      },
      "solution": {
        "explanation": "Leveraging WebSockets and event listeners, you can establish a real-time data pipeline for your application. This guide walks you through setting up a WebSocket connection, subscribing to data channels, and implementing event listeners to process and visualize data as it arrives.",
        "code": "void setupRealTimeConnection() {\\n    WebSocketClient client(\"ws://example.com/realtime\");\\n\\n    client.on('message', handleMessage);\\n\\n    client.connect();\\n}\\n\\nvoid handleMessage(const Message& message) {\\n    // Process and display the message\\n}"
      }
    }
  ]
}